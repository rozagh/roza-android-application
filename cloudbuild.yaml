steps:
#Copy
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '-r', '${_ANDROID_SIGNING_BUCKET_PATH}/*','.']
  id: copy_signing_files
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', '-r', '${_FABRIC_API_SECRET_BUCKET_PATH}/*', 'app']
  id: copy_fabric_files
#Copy the build cache locally, if it exists.
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['rsync', '${_ANDROID_BUILD_CACHE}/', '/build_cache']
  id: copy_build_cache_local
  volumes:
    - name: 'build_cache'
      path: '/build_cache'
#list all files in root dir
- name: 'gcr.io/cloud-builders/git'
  args: ['ls-files', '-o', '-t']
  id: git-list-files
  waitFor:
    - copy_signing_files
    - copy_build_cache_local
    - copy_fabric_files
#Android build and distribute with gradle
- name: 'gcr.io/$PROJECT_ID/android-builder'
  args: ['gradle-build','${_ANDROID_SDK_LICENSE}','-PbetaDistributionGroupAliases=${_EMAIL_DISTRIBUTION_GROUP}','assemble${_BUILD_TYPE}','crashlyticsUploadDistribution${_BUILD_TYPE}', '--stacktrace']
  id: gradle_build
  waitFor:
    - git-list-files
    - copy_signing_files
    - copy_build_cache_local
    - copy_fabric_files
  volumes:
    - name: 'build_cache'
      path: '/build_cache'
- name: 'gcr.io/cloud-builders/git'
  args: ['assemble${_BUILD_TYPE}','crashlyticsUploadDistribution${_BUILD_TYPE}', '-PbetaDistributionGroupAliases=${_EMAIL_DISTRIBUTION_GROUP}', '--stacktrace']
  id: gradle_build_local
  waitFor:
    - git-list-files
    - copy_signing_files
    - copy_build_cache_local
    - copy_fabric_files
#Repopulate the build-cache
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['-q','cp', '/build_cache/dot_gradle.zip', '${_ANDROID_BUILD_CACHE}']
  waitFor:
    - gradle_build
  volumes:
    - name: 'build_cache'
      path: '/build_cache'
timeout: 1200s
